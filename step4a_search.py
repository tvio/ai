#!/usr/bin/env python3
"""
Krok 4a: Vyhled√°v√°n√≠ v extrahovan√Ωch informac√≠ch o l√©c√≠ch
Samostatn√Ω modul pro vyhled√°v√°n√≠ v datab√°zi
"""

import pg8000
import logging
from typing import List, Dict, Any

# Nastaven√≠ logov√°n√≠
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MedicineSearcher:
    """T≈ô√≠da pro vyhled√°v√°n√≠ l√©k≈Ø v extrahovan√Ωch informac√≠ch"""
    
    def __init__(self, host: str = "localhost", port: int = 5432, 
                 database: str = "test", user: str = "test", password: str = "test"):
        self.connection_params = {
            'host': host,
            'port': port,
            'database': database,
            'user': user,
            'password': password
        }
    
    def search_medicines(self, query: str) -> List[Dict[str, Any]]:
        """Vyhled√° l√©ky podle dotazu"""
        try:
            with pg8000.connect(**self.connection_params) as conn:
                with conn.cursor() as cursor:
                    
                    # Jednoduch√© vyhled√°v√°n√≠ v extrahovan√Ωch informac√≠ch
                    cursor.execute("""
                        SELECT DISTINCT l.kod_sukl, l.nazev, ei.indikace, ei.davkovani
                        FROM leciva l
                        JOIN extracted_info ei ON l.kod_sukl = ei.kod_sukl
                        WHERE 
                            ei.indikace::text ILIKE %s OR
                            ei.davkovani::text ILIKE %s OR
                            l.nazev ILIKE %s
                        LIMIT 20
                    """, (f'%{query}%', f'%{query}%', f'%{query}%'))
                    
                    results = []
                    for row in cursor.fetchall():
                        results.append({
                            'kod_sukl': row[0],
                            'nazev': row[1],
                            'indikace': row[2] if row[2] else [],
                            'davkovani': row[3] if row[3] else []
                        })
                    
                    return results
                    
        except Exception as e:
            logger.error(f"Chyba p≈ôi vyhled√°v√°n√≠: {e}")
            return []
    
    def search_by_indication(self, indication: str) -> List[Dict[str, Any]]:
        """Vyhled√° l√©ky podle konkr√©tn√≠ indikace"""
        try:
            with pg8000.connect(**self.connection_params) as conn:
                with conn.cursor() as cursor:
                    
                    cursor.execute("""
                        SELECT DISTINCT l.kod_sukl, l.nazev, ei.indikace, ei.davkovani
                        FROM leciva l
                        JOIN extracted_info ei ON l.kod_sukl = ei.kod_sukl
                        WHERE ei.indikace::text ILIKE %s
                        LIMIT 20
                    """, (f'%{indication}%',))
                    
                    results = []
                    for row in cursor.fetchall():
                        results.append({
                            'kod_sukl': row[0],
                            'nazev': row[1],
                            'indikace': row[2] if row[2] else [],
                            'davkovani': row[3] if row[3] else []
                        })
                    
                    return results
                    
        except Exception as e:
            logger.error(f"Chyba p≈ôi vyhled√°v√°n√≠ podle indikace: {e}")
            return []
    
    def search_by_dosage(self, dosage: str) -> List[Dict[str, Any]]:
        """Vyhled√° l√©ky podle d√°vkov√°n√≠"""
        try:
            with pg8000.connect(**self.connection_params) as conn:
                with conn.cursor() as cursor:
                    
                    cursor.execute("""
                        SELECT DISTINCT l.kod_sukl, l.nazev, ei.indikace, ei.davkovani
                        FROM leciva l
                        JOIN extracted_info ei ON l.kod_sukl = ei.kod_sukl
                        WHERE ei.davkovani::text ILIKE %s
                        LIMIT 20
                    """, (f'%{dosage}%',))
                    
                    results = []
                    for row in cursor.fetchall():
                        results.append({
                            'kod_sukl': row[0],
                            'nazev': row[1],
                            'indikace': row[2] if row[2] else [],
                            'davkovani': row[3] if row[3] else []
                        })
                    
                    return results
                    
        except Exception as e:
            logger.error(f"Chyba p≈ôi vyhled√°v√°n√≠ podle d√°vkov√°n√≠: {e}")
            return []
    
    def get_medicine_details(self, kod_sukl: str) -> Dict[str, Any]:
        """Z√≠sk√° detailn√≠ informace o konkr√©tn√≠m l√©ku"""
        try:
            with pg8000.connect(**self.connection_params) as conn:
                with conn.cursor() as cursor:
                    
                    cursor.execute("""
                        SELECT l.kod_sukl, l.nazev, ei.indikace, ei.davkovani, ei.extracted_text
                        FROM leciva l
                        JOIN extracted_info ei ON l.kod_sukl = ei.kod_sukl
                        WHERE l.kod_sukl = %s
                    """, (kod_sukl,))
                    
                    row = cursor.fetchone()
                    if row:
                        return {
                            'kod_sukl': row[0],
                            'nazev': row[1],
                            'indikace': row[2] if row[2] else [],
                            'davkovani': row[3] if row[3] else [],
                            'extracted_text': row[4] if row[4] else ""
                        }
                    else:
                        return {}
                    
        except Exception as e:
            logger.error(f"Chyba p≈ôi z√≠sk√°v√°n√≠ detail≈Ø l√©ku {kod_sukl}: {e}")
            return {}

def main():
    """Hlavn√≠ funkce pro testov√°n√≠ vyhled√°v√°n√≠"""
    logger.info("üîç Testuji vyhled√°v√°n√≠ v extrahovan√Ωch informac√≠ch")
    
    # Inicializace vyhled√°vaƒçe
    searcher = MedicineSearcher()
    
    # Test 1: Obecn√© vyhled√°v√°n√≠
    logger.info("Test 1: Obecn√© vyhled√°v√°n√≠ pro 'krv√°cen√≠'")
    results = searcher.search_medicines("krv√°cen√≠")
    logger.info(f"Nalezeno {len(results)} l√©k≈Ø pro 'krv√°cen√≠'")
    for result in results[:3]:  # Zobraz√≠me prvn√≠ 3
        logger.info(f"  - {result['kod_sukl']}: {result['nazev']}")
    
    # Test 2: Vyhled√°v√°n√≠ podle indikace
    logger.info("\nTest 2: Vyhled√°v√°n√≠ podle indikace 'bolest'")
    results = searcher.search_by_indication("bolest")
    logger.info(f"Nalezeno {len(results)} l√©k≈Ø pro indikaci 'bolest'")
    for result in results[:3]:
        logger.info(f"  - {result['kod_sukl']}: {result['nazev']}")
    
    # Test 3: Vyhled√°v√°n√≠ podle d√°vkov√°n√≠
    logger.info("\nTest 3: Vyhled√°v√°n√≠ podle d√°vkov√°n√≠ 'tableta'")
    results = searcher.search_by_dosage("tableta")
    logger.info(f"Nalezeno {len(results)} l√©k≈Ø pro d√°vkov√°n√≠ 'tableta'")
    for result in results[:3]:
        logger.info(f"  - {result['kod_sukl']}: {result['nazev']}")
    
    # Test 4: Detailn√≠ informace o l√©ku (pokud existuje)
    if results:
        first_medicine = results[0]['kod_sukl']
        logger.info(f"\nTest 4: Detailn√≠ informace o l√©ku {first_medicine}")
        details = searcher.get_medicine_details(first_medicine)
        if details:
            logger.info(f"  N√°zev: {details['nazev']}")
            logger.info(f"  Indikace: {details['indikace']}")
            logger.info(f"  D√°vkov√°n√≠: {details['davkovani']}")
        else:
            logger.info("  L√©k nebyl nalezen")

if __name__ == "__main__":
    main()
