#!/usr/bin/env python3
"""
Krok 3b: Extrakce informac√≠ z PDF dokument≈Ø pomoc√≠ OpenAI API
Alternativa k Ollama s pou≈æit√≠m OpenAI API
"""

import requests
import pg8000
import json
import time
from typing import List, Dict, Any, Optional
import logging
import pdfplumber
from openai import OpenAI
from io import BytesIO
from openai_config import OPENAI_API_KEY, OPENAI_MODEL, OPENAI_MAX_TOKENS, OPENAI_SEED

# Nastaven√≠ logov√°n√≠
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class PDFExtractor:
    """T≈ô√≠da pro extrakci textu z PDF s OpenAI API"""
    
    def __init__(self, api_key: str):
        self.openai_client = OpenAI(api_key=api_key)
    
    def extract_text_from_pdf(self, pdf_content: bytes) -> str:
        """Extrahuje text z PDF dokumentu"""
        try:
            with BytesIO(pdf_content) as pdf_file:
                with pdfplumber.open(pdf_file) as pdf:
                    text = ""
                    for page in pdf.pages:
                        page_text = page.extract_text()
                        if page_text:
                            text += page_text + "\n"
                    
                    logger.info(f"Extrahov√°no {len(text)} znak≈Ø textu z PDF")
                    return text
                    
        except Exception as e:
            logger.error(f"Chyba p≈ôi extrakci textu z PDF: {e}")
            return ""
    
    def extract_medicine_info(self, text: str, kod_sukl: str) -> Dict[str, Any]:
        """Extrahuje informace o l√©ku pomoc√≠ OpenAI API"""
        try:
                        # Prompt pro OpenAI API
            prompt = f"""
            Analyzuj n√°sleduj√≠c√≠ text z SPC (Souhrn √∫daj≈Ø o p≈ô√≠pravku) pro l√©k s k√≥dem S√öKL: {kod_sukl}
            
            Extrahuj n√°sleduj√≠c√≠ informace a vra≈• je v JSON form√°tu:
            
            {{
                "indikace": [""],
                "davkovani": [""],
          }}
            Text: {text[:2000]}
        """

            
            # Vol√°n√≠ OpenAI API
            response = self.openai_client.chat.completions.create(
                model=OPENAI_MODEL,
                messages=[{
                    'role': 'user',
                    'content': prompt
                }],
                # temperature=0.0 nen√≠ podporov√°no GPT-5-nano, pou≈æ√≠v√° v√Ωchoz√≠ 1.0
                response_format={"type": "json_object"},  # Zaji≈°≈•uje JSON v√Ωstup
                seed=OPENAI_SEED
            )
            
            # Parsov√°n√≠ JSON odpovƒõdi
            try:
                content = response.choices[0].message.content
                if content is None:
                    logger.error(f"Pr√°zdn√Ω obsah odpovƒõdi pro {kod_sukl}")
                    return {}
                    
                result = json.loads(content)
                logger.info(f"√öspƒõ≈°nƒõ extrahov√°ny informace pro {kod_sukl}")
                return result
            except json.JSONDecodeError as e:
                logger.error(f"Chyba p≈ôi parsov√°n√≠ JSON odpovƒõdi pro {kod_sukl}: {e}")
                logger.error(f"Odpovƒõƒè: {content}")
                return {}
                
        except Exception as e:
            logger.error(f"Chyba p≈ôi OpenAI API extrakci pro {kod_sukl}: {e}")
            return {}

class DatabaseManager:
    """Roz≈°√≠≈ôen√Ω spr√°vce datab√°ze pro ukl√°d√°n√≠ extrahovan√Ωch informac√≠"""
    
    def __init__(self, host: str = "localhost", port: int = 5432, 
                 database: str = "test", user: str = "test", password: str = "test"):
        self.connection_params = {
            'host': host,
            'port': port,
            'database': database,
            'user': user,
            'password': password
        }
        self.init_extraction_tables()
    
    def init_extraction_tables(self):
        """Vytvo≈ô√≠ tabulky pro extrahovan√© informace"""
        try:
            logger.info("P≈ôipojuji k datab√°zi...")
            with pg8000.connect(**self.connection_params) as conn:
                logger.info("P≈ôipojen√≠ √∫spƒõ≈°n√©, vytv√°≈ô√≠m tabulky...")
                with conn.cursor() as cursor:
                    
                    # Tabulka pro extrahovan√© informace
                    logger.info("Vytv√°≈ô√≠m tabulku extracted_info...")
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS extracted_info (
                            id SERIAL PRIMARY KEY,
                            kod_sukl VARCHAR(20) REFERENCES leciva(kod_sukl) UNIQUE,
                            indikace TEXT[],
                            davkovani TEXT[],
                            extracted_text TEXT,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    """)
                    logger.info("Tabulka extracted_info vytvo≈ôena")
                    
                    # Tabulka pro vyhled√°v√°n√≠
                    logger.info("Vytv√°≈ô√≠m tabulku search_index...")
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS search_index (
                            id SERIAL PRIMARY KEY,
                            kod_sukl VARCHAR(20) REFERENCES leciva(kod_sukl),
                            klicove_slovo VARCHAR(100),
                            typ_informace VARCHAR(50),
                            relevance INTEGER DEFAULT 1,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    """)
                    logger.info("Tabulka search_index vytvo≈ôena")
                    
                    conn.commit()
                    logger.info("Tabulky pro extrakci inicializov√°ny")
                    
        except Exception as e:
            logger.error(f"Chyba p≈ôi inicializaci tabulek pro extrakci: {e}")
            raise
    
    def save_extracted_info(self, kod_sukl: str, extracted_info: Dict[str, Any], 
                          extracted_text: str) -> bool:
        """Ulo≈æ√≠ extrahovan√© informace do datab√°ze"""
        try:
            with pg8000.connect(**self.connection_params) as conn:
                with conn.cursor() as cursor:
                    
                    cursor.execute("""
                        INSERT INTO extracted_info (
                            kod_sukl, indikace, davkovani, extracted_text
                        ) VALUES (%s, %s, %s, %s)
                        ON CONFLICT (kod_sukl) DO UPDATE SET
                            indikace = EXCLUDED.indikace,
                            davkovani = EXCLUDED.davkovani,
                            extracted_text = EXCLUDED.extracted_text
                    """, (
                        kod_sukl,
                        extracted_info.get('indikace', []),
                        extracted_info.get('davkovani', []),
                        extracted_text[:1000]  # Omez√≠me d√©lku ulo≈æen√©ho textu
                    ))
                    
                    conn.commit()
                    return True
                    
        except Exception as e:
            logger.error(f"Chyba p≈ôi ukl√°d√°n√≠ extrahovan√Ωch informac√≠ pro {kod_sukl}: {e}")
            return False
    


def main():
    """Hlavn√≠ funkce pro extrakci informac√≠ z PDF pomoc√≠ OpenAI API"""
    logger.info("üöÄ Zaƒç√≠n√°m extrakci informac√≠ z PDF dokument≈Ø pomoc√≠ OpenAI API")
    
    # Inicializace
    extractor = PDFExtractor(OPENAI_API_KEY)
    db_manager = DatabaseManager()
    
    # Naƒçten√≠ dokument≈Ø z datab√°ze
    try:
        logger.info("P≈ôipojuji k datab√°zi pro naƒçten√≠ dokument≈Ø...")
        with pg8000.connect(**db_manager.connection_params) as conn:
            logger.info("P≈ôipojen√≠ √∫spƒõ≈°n√©, spou≈°t√≠m dotaz...")
            with conn.cursor() as cursor:
                
                # Z√≠sk√°me l√©ky s dokumenty, kter√© je≈°tƒõ nebyly zpracov√°ny
                logger.info("Spou≈°t√≠m SQL dotaz pro naƒçten√≠ l√©k≈Ø...")
                query = """
                    SELECT DISTINCT l.kod_sukl, l.nazev, d.pdf_data
                    FROM leciva l
                    JOIN dokumenty d ON l.kod_sukl = d.kod_sukl
                    WHERE d.typ = 'spc'
                    AND l.kod_sukl NOT IN (
                        SELECT kod_sukl FROM extracted_info
                    )
                    
                """
                logger.info(f"SQL dotaz: {query}")
                cursor.execute(query)
                
                medicines = cursor.fetchall()
                logger.info(f"Naƒçteno {len(medicines)} l√©k≈Ø k zpracov√°n√≠")
                
                for i, (kod_sukl, nazev, pdf_data) in enumerate(medicines, 1):
                    logger.info(f"Zpracov√°v√°m {i}/{len(medicines)}: {kod_sukl} - {nazev}")
                    
                    try:
                        # 1. Extrakce textu z PDF
                        text = extractor.extract_text_from_pdf(pdf_data)
                        if not text:
                            logger.warning(f"Pr√°zdn√Ω text pro {kod_sukl}")
                            continue
                        
                        # 2. OpenAI API extrakce informac√≠
                        extracted_info = extractor.extract_medicine_info(text, kod_sukl)
                        if not extracted_info:
                            logger.warning(f"Pr√°zdn√© extrahovan√© informace pro {kod_sukl}")
                            continue
                        
                        # 3. Ulo≈æen√≠ do datab√°ze
                        if db_manager.save_extracted_info(kod_sukl, extracted_info, text):
                            logger.info(f"‚úÖ Informace ulo≈æeny pro {kod_sukl}")
                        else:
                            logger.error(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ pro {kod_sukl}")
                        
                        # Krat≈°√≠ pauza pro OpenAI API (rate limiting)
                        time.sleep(5)  # 5 sekund pauza mezi dotazy
                        
                    except Exception as e:
                        logger.error(f"Chyba p≈ôi zpracov√°n√≠ {kod_sukl}: {e}")
                        continue
                

                
    except Exception as e:
        logger.error(f"Chyba p≈ôi naƒç√≠t√°n√≠ dat: {e}")

if __name__ == "__main__":
    main()
